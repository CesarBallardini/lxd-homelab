# -*- mode: ruby -*-
# vi: set ft=ruby :

# Para aprovechar este Vagrantfile necesita Vagrant y Virtualbox instalados:
#
#   * Virtualbox
#
#   * Vagrant
#
#   * Plugins de Vagrant:
#       + vagrant-proxyconf y su configuracion si requiere de un Proxy para salir a Internet
#       + vagrant-cachier
#       + vagrant-disksize
#       + vagrant-share
#       + vagrant-vbguest

VAGRANTFILE_API_VERSION = "2"

HOSTNAME = "lxd1"
DOMAIN   = "infra.ballardini.com.ar"


$post_up_message = <<POST_UP_MESSAGE
------------------------------------------------------
Cluster LXD con un solo nodo

URLS:
 - host only - https://lxd1.ballardini.com.ar/
              

------------------------------------------------------
POST_UP_MESSAGE


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.post_up_message = $post_up_message

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    # uso cachier con NFS solamente si el hostmanager gestiona los nombres en /etc/hosts del host
    if Vagrant.has_plugin?("vagrant-cachier")

      config.cache.auto_detect = false
      # W: Download is performed unsandboxed as root as file '/var/cache/apt/archives/partial/xyz' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied)

      config.cache.synced_folder_opts = {
        owner: "_apt"
      }
      # Configure cached packages to be shared between instances of the same base box.
      # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
      config.cache.scope = :box
   end

  end

 config.vm.define HOSTNAME do |srv|

    srv.vm.box = "debian/buster64"
    srv.vm.network "private_network", ip: "192.168.33.11"

    srv.vm.boot_timeout = 3600
    srv.vm.box_check_update = true
    srv.ssh.forward_agent = true
    srv.ssh.forward_x11 = true
    srv.vm.hostname = HOSTNAME

    if Vagrant.has_plugin?("vagrant-hostmanager")
      srv.hostmanager.aliases = %W(#{HOSTNAME}.#{DOMAIN} )
    end

    if Vagrant.has_plugin?("vagrant-vbguest") then
        srv.vbguest.auto_update = true
        srv.vbguest.no_install = false
    end

    srv.vm.synced_folder ".", "/vagrant", disabled: false, SharedFoldersEnableSymlinksCreate: false


    srv.vm.provider :virtualbox do |vb|
      vb.gui = false
      vb.cpus = 2
      vb.memory = "1024"
      # https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm mas parametros para personalizar en VB
    end
  end

    ##
    # Aprovisionamiento
    #
    config.vm.provision "fix-no-tty", type: "shell" do |s|
        s.privileged = false
        s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
    end

    config.vm.provision "actualiza", type: "shell" do |s|  # http://foo-o-rama.com/vagrant--stdin-is-not-a-tty--fix.html
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          sudo -E apt-get --purge remove apt-listchanges -y > /dev/null 2>&1
          sudo -E apt-get update -y -qq > /dev/null 2>&1
          sudo dpkg-reconfigure --frontend=noninteractive libc6 > /dev/null 2>&1
          sudo -E apt-get install linux-image-amd64 ${APT_OPTIONS}  || true
          sudo -E apt-get upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get dist-upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get autoremove -y > /dev/null 2>&1
          sudo -E apt-get autoclean -y > /dev/null 2>&1
          sudo -E apt-get clean > /dev/null 2>&1
        SHELL
    end

    config.vm.provision "ssh_pub_key", type: :shell do |s|
      begin
          ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
          s.inline = <<-SHELL
            mkdir -p /root/.ssh/
            touch /root/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
          SHELL
      rescue
          puts "No hay claves publicas en el HOME de su pc"
          s.inline = "echo OK sin claves publicas"
      end
    end

    config.vm.provision "instala_snap", type: "shell" do |s|
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          echo
          echo '########################### Instalo snap'
          echo
          # https://forum.snapcraft.io/t/installing-snap-on-debian/6742
          # https://snapcraft.io/docs/installing-snap-on-debian
          sudo apt-get install snapd ${APT_OPTIONS}
          sudo -i snap install core 
          sudo -i snap refresh core

          sudo systemctl unmask --now snapd
          sudo systemctl restart snapd
          sudo systemctl status  snapd
          snap version

          sudo -i snap install hello-world
          export PATH=$PATH:/snap/bin
          hello-world

        SHELL
    end

    #config.vm.provision "instala_lxd", run: "never", type: "shell" do |s|
    config.vm.provision "instala_lxd", type: "shell" do |s|
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          sudo apt-get install debconf-utils ${APT_OPTIONS}
          sudo apt-get install jq sshpass  ${APT_OPTIONS} # para las comprobaciones en el README
          echo
          echo '########################### Instalo lxd desde snap'
          echo
          sudo -i snap install lxd --channel=latest/stable
          #sudo snap refresh lxd --channel=latest/stable   # lo actualizo
          
          echo
          echo '########################### las utilidades para soporte de ZFS estan en backports'
          echo
          echo "deb http://deb.debian.org/debian `lsb_release -cs`-backports main contrib non-free" | sudo tee /etc/apt/sources.list.d/backports.list
          sudo apt-get update -q
          sudo apt-get install linux-headers-`uname -r`  ${APT_OPTIONS}

          echo "zfs-dkms zfs-dkms/note-incompatible-licenses note" | sudo debconf-set-selections
          sudo apt-get install -t buster-backports zfsutils-linux ${APT_OPTIONS}
          sudo grub-install /dev/sda

          echo
          echo '########################### configuro LXD inicialmente'
          echo
          sudo -i lxd init --auto --storage-backend=zfs
          sudo usermod --append --groups lxd vagrant

          if [ -n "${http_proxy}" ] || [ -n "${https_proxy}" ]
          then
            # para que LXD pueda descargar las imagenes
            sudo -i lxc config set core.proxy_http         "${http_proxy}"
            sudo -i lxc config set core.proxy_https        "${https_proxy}"
            sudo -i lxc config set core.proxy_ignore_hosts "${no_proxy}"

            # para que los contenedores del perfil default puedan acceder a internet
            sudo -i lxc profile set default environment.http_proxy  "${http_proxy}"
            sudo -i lxc profile set default environment.https_proxy "${https_proxy}"
            sudo -i lxc profile set default environment.no_proxy    "${no_proxy}"
          fi

        SHELL
    end
end
